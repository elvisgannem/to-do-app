{"version":3,"sources":["components/Header.jsx","components/ToDoForm.jsx","components/Tareas.jsx","components/ListaTareas.jsx","App.js","index.js"],"names":["Header","mostrarCompletadas","cambiarMostrarCompletadas","toggleCompletadas","className","onClick","icon","faEyeSlash","faEye","ToDoForm","tareas","cambiarTareas","useState","inputTarea","cambiarInputTarea","action","onSubmit","e","preventDefault","id","uuidv4","texto","completada","type","placeholder","value","onChange","target","handleInput","faPlusSquare","Tareas","tarea","toggleCompletada","editarTarea","borrarTarea","editandoTarea","cambiarEditandoTarea","nuevaTarea","cambiarNuevaTarea","faCheckSquare","faSquare","faEdit","faTimes","ListaTareas","map","nuevoTexto","filter","length","App","tareasGuardadas","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","configMostrarCompletadas","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d8a36c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faEyeSlash, faEye} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Header = ({mostrarCompletadas, cambiarMostrarCompletadas}) => {\r\n\r\n    const toggleCompletadas = () => {\r\n        cambiarMostrarCompletadas(!mostrarCompletadas);\r\n    }\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <h1 className=\"header__titulo\">Lista de Tareas</h1>\r\n            {mostrarCompletadas ? \r\n            <button \r\n            className=\"header__boton\"\r\n            onClick={() => toggleCompletadas()}\r\n            >\r\n                Ocultar tareas completadas\r\n                <FontAwesomeIcon icon={faEyeSlash} className=\"header__icono-boton\" />\r\n            </button>\r\n            :\r\n            <button \r\n            className=\"header__boton\"\r\n            onClick={() => toggleCompletadas()}\r\n            >\r\n                Mostrar tareas completadas\r\n                <FontAwesomeIcon icon={faEye} className=\"header__icono-boton\" />\r\n            </button>\r\n            }\r\n        </header>\r\n    );\r\n}\r\n \r\nexport default Header;","import React, {useState} from 'react';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faPlusSquare} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ToDoForm = ({tareas, cambiarTareas}) => {\r\n\r\n    const [inputTarea, cambiarInputTarea] = useState('');\r\n\r\n    const handleInput = (e) => {\r\n        cambiarInputTarea(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n//Toma todo el valor de las tareas ..., y agrega otro objeto que contiene la información de la nueva tarea.\r\n\r\n            cambiarTareas([...tareas, {\r\n            id:uuidv4(), //Cada que la función se ejecuta, genera un identificador único.\r\n            texto: inputTarea,\r\n            completada: false\r\n        }]);\r\n        cambiarInputTarea('');\r\n    }\r\n\r\n    return ( \r\n        <form action=\"\" className=\"form-to-do\" onSubmit={handleSubmit}>\r\n            <input \r\n            type=\"text\" \r\n            className=\"form-to-do__input\"\r\n            placeholder=\"Escribe una tarea\"\r\n            value={inputTarea}\r\n            onChange={(e) => handleInput(e)}\r\n            />\r\n\r\n            <button \r\n            type=\"submit\" \r\n            className=\"form-to-do__btn\"\r\n            >\r\n                <FontAwesomeIcon \r\n                icon={faPlusSquare} className=\"form-to-do__icon-btn\"/>\r\n            </button>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default ToDoForm;","import React, {useState} from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faCheckSquare, faEdit, faTimes, faSquare, faToggleOff} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Tareas = ({tarea, toggleCompletada, editarTarea, borrarTarea}) => { //impotando funciones y propiedades de ListaTareas\r\n\r\n    const [editandoTarea, cambiarEditandoTarea] = useState(false);\r\n    //Para trabajar con inputs, debemos agregar otro estado.\r\n    const [nuevaTarea, cambiarNuevaTarea] = useState(tarea.texto);\r\n    \r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        editarTarea(tarea.id, nuevaTarea);\r\n        cambiarEditandoTarea(false);\r\n    }\r\n\r\n    return (\r\n        <li className=\"lista-tareas__tarea\">\r\n            <FontAwesomeIcon \r\n            icon={tarea.completada ? faCheckSquare : faSquare} \r\n            className=\"lista-tareas__icono lista-tareas__icono-check\"\r\n            onClick={() => toggleCompletada(tarea.id)}\r\n            />\r\n\r\n            <div className=\"lista-tareas__texto\">\r\n                 {editandoTarea ? \r\n                    <form action=\"\" className=\"formulario-editar-tarea\"\r\n                    onSubmit={handleSubmit}>\r\n                        <input \r\n                        type=\"text\"\r\n                        className=\"formulario-editar-tarea__input\"\r\n                        value={nuevaTarea}\r\n                        onChange={(e) => cambiarNuevaTarea(e.target.value)}\r\n                        />\r\n                        <button \r\n                        type=\"submit\" className=\"formulario-editar-tarea__btn\">\r\n                            Actualizar\r\n                        </button>\r\n                    </form>\r\n                    :\r\n                    tarea.texto\r\n                }\r\n            </div>\r\n\r\n            <div className=\"lista-tareas__contenedor-botones\">\r\n                <FontAwesomeIcon \r\n                icon={faEdit} \r\n                className=\"lista-tareas__icono  lista-tareas__icono-accion\"\r\n                onClick={() => {cambiarEditandoTarea(!editandoTarea)}}\r\n                />\r\n                <FontAwesomeIcon \r\n                icon={faTimes} \r\n                className=\"lista-tareas__icono  lista-tareas__icono-accion\"\r\n                onClick={() => borrarTarea(tarea.id)}\r\n                />\r\n            </div>\r\n            </li>\r\n    );\r\n}\r\n \r\nexport default Tareas;","import React from 'react';\r\nimport Tareas from './Tareas';\r\n\r\nconst ListaTareas = ({tareas, cambiarTareas, mostrarCompletadas}) => {\r\n\r\n    const toggleCompletada = (id) => {\r\n        cambiarTareas(tareas.map((tarea) => {\r\n            if(tarea.id === id){ //pregunta por cada tarea si el id es el mismo que tiene la funcion toggleCompletada.\r\n                return {...tarea, completada: !tarea.completada}\r\n            }\r\n            return tarea;\r\n        }));\r\n    }\r\n\r\n    const editarTarea = (id, nuevoTexto) => {\r\n        cambiarTareas(tareas.map((tarea) => {\r\n            if(tarea.id === id){ //pregunta por cada tarea si el id es el mismo que tiene la funcion toggleCompletada.\r\n                return {...tarea, texto: nuevoTexto}\r\n            }\r\n            return tarea;\r\n        }));\r\n    }\r\n\r\n    const borrarTarea = (id) => {\r\n        cambiarTareas(tareas.filter((tarea) => { //filter permite que si una tarea es verdadera, no la devuelve en el arreglo. \r\n            if(tarea.id !== id){\r\n                return tarea;\r\n            }\r\n            return;\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <ul className=\"lista-tareas\">\r\n            {/* Si la cantidad de tareas es mayor a cero, ejecutar: */}\r\n            {tareas.length > 0 ? \r\n                tareas.map((tarea) => {\r\n                if(mostrarCompletadas){\r\n                    return <Tareas \r\n                                key ={tarea.id} \r\n                                tarea={tarea}\r\n                                toggleCompletada = {toggleCompletada} \r\n                                editarTarea={editarTarea}\r\n                                borrarTarea={borrarTarea}\r\n                                //pasando las funciones y propiedades a Tareas\r\n                            />   \r\n                            //si no está completada, la devuelve al arreglo.\r\n                } else if (!tarea.completada) {\r\n                    return <Tareas \r\n                    key ={tarea.id} \r\n                    tarea={tarea}\r\n                    toggleCompletada = {toggleCompletada} \r\n                    editarTarea={editarTarea}\r\n                    borrarTarea={borrarTarea}/>\r\n                }    \r\n                return;\r\n\r\n            })\r\n            : <div className=\"lista-tareas__mensaje\">No hay tareas agregadas</div>\r\n        }\r\n        </ul>\r\n    );\r\n}\r\n \r\nexport default ListaTareas;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport ToDoForm from './components/ToDoForm';\nimport ListaTareas from './components/ListaTareas';\n\nconst App = () => {\n  //Tareas guardadas de localstorage.\n  const tareasGuardadas = localStorage.getItem('tareas') ? JSON.parse(localStorage.getItem('tareas')) : [];\n\n  //Estado de las tareas obtenido de localstorage.\n  const [tareas, cambiarTareas] = useState (tareasGuardadas);\n\n  useEffect(() => {\n    localStorage.setItem('tareas', JSON.stringify(tareas)); //guardando el elemento dentro del espacio local. 2do parametro: transformar tareas a cadena de texto formato JSON\n     \n  }, [tareas]) //el codigo se ejecuta la primera vez y cuando las tareas cambian.\n\n  //Una variable que accede a LocalStorage para ver si mostrarCompletadas es null.\n  let configMostrarCompletadas = '';\n  if(localStorage.getItem('mostrarCompletadas') === null){\n    //Si null, el usuario no tiene cnfiguracion guardada dentro de localstorage, entonces, quiero asignar una.\n    configMostrarCompletadas = true;\n  } else {\n    configMostrarCompletadas = localStorage.getItem('mostrarCompletadas') === 'true';\n  }\n  //Estado de mostrarCompletadas.\n  const [mostrarCompletadas, cambiarMostrarCompletadas] = useState(configMostrarCompletadas); \n\n  useEffect(() => {\n    localStorage.setItem('mostrarCompletadas', mostrarCompletadas.toString());\n     \n  }, [mostrarCompletadas])\n\n  return (\n    <div className=\"contenedor\">\n      <Header \n      mostrarCompletadas={mostrarCompletadas}\n      cambiarMostrarCompletadas={cambiarMostrarCompletadas}/>\n      <ToDoForm tareas={tareas} cambiarTareas={cambiarTareas}/>\n      <ListaTareas \n      tareas={tareas} \n      cambiarTareas={cambiarTareas} \n      mostrarCompletadas={mostrarCompletadas}/> {/*recibe tareas como propiedad*/}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}